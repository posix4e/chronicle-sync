# 1) Redirect HTTP to HTTPS
server {
    listen 80;
    server_name {{ my_domain }};

    # If you'd like to keep using HTTP challenge for certbot, you can keep this:
    location ~ /.well-known/acme-challenge/ {
        allow all;
    }

    # Redirect everything else on port 80 to HTTPS
    return 301 https://$host$request_uri;
}

# 2) HTTPS server block
server {
    listen 443 ssl;
    server_name {{ my_domain }};

    # SSL certificate paths (replace with your cert files)
    #
    ssl_certificate /etc/letsencrypt/live/babynamethunderdome.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/babynamethunderdome.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    # Serve static files directly
    location /static/ {
        alias {{ project_path }}/app/static/;
    }

    # Optionally serve raw HTML from a templates directory, if desired
    # location /templates/ {
    #     alias {{ project_path }}/app/templates/;
    # }

    # Everything else is proxied to Uvicorn
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # If you're using Certbot's webroot plugin for SSL renewal, add:
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root {{ project_path }}/acme-challenges;  # or wherever your challenges get placed
    }
}

